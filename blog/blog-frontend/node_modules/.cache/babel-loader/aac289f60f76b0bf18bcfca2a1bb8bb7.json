{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST');\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n});\nconst writePostSaga = createRequestSaga(WRITE_POST, postAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return { ...state,\n      [key]: value\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: post\n    } = _ref4;\n    return { ...state,\n      post\n    };\n  },\n  [WRITE_POST_FAILURE]: (state, _ref5) => {\n    let {\n      payload: postError\n    } = _ref5;\n    return { ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","writePostSaga","writeSaga","initialState","post","postError","write","state","payload"],"sources":["/home/djkim0604/klaytn/workspace_djkim/js_test/react_basic/blog/blog-frontend/src/modules/write.js"],"sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\nimport * as postAPI from '../lib/api/posts';\nimport {takeLatest} from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST');\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({key, value}) => ({\n    key,\n    value,\n}));\nexport const writePost = createAction(WRITE_POST, \n    ({title, body, tags}) => ({\n        title, body, tags,\n    })\n);\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postAPI.writePost);\nexport function* writeSaga() {\n    yield takeLatest(WRITE_POST, writePostSaga);\n}\n\nconst initialState = {\n    title: '',\n    body: '',\n    tags: [],\n    post: null,\n    postError: null,\n};\n\nconst write = handleActions(\n    {\n        [INITIALIZE]: state => initialState,\n        [CHANGE_FIELD]: (state, {payload: {key, value}}) => ({\n            ...state,\n            [key]: value,\n        }),\n        [WRITE_POST]: state => ({\n            ...state,\n            post: null,\n            postError: null,\n        }),\n        [WRITE_POST_SUCCESS]: (state, {payload: post}) => ({\n            ...state,\n            post,\n        }),\n        [WRITE_POST_FAILURE]: (state, {payload: postError}) => ({\n            ...state,\n            postError,\n        })\n    },\n    initialState,\n);\n\nexport default write;\n\n"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,iBAAP,IAA2BC,wBAA3B,QAA0D,0BAA1D;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AAEA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAM,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,kBAAjC,IAAuDP,wBAAwB,CAAC,kBAAD,CAArF;AAEA,OAAO,MAAMQ,UAAU,GAAGX,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAD,EAAe;EAAA,IAAC;IAACM,GAAD;IAAMC;EAAN,CAAD;EAAA,OAAmB;IACrED,GADqE;IAErEC;EAFqE,CAAnB;AAAA,CAAf,CAAhC;AAIP,OAAO,MAAMC,SAAS,GAAGf,YAAY,CAACQ,UAAD,EACjC;EAAA,IAAC;IAACQ,KAAD;IAAQC,IAAR;IAAcC;EAAd,CAAD;EAAA,OAA0B;IACtBF,KADsB;IACfC,IADe;IACTC;EADS,CAA1B;AAAA,CADiC,CAA9B;AAMP,MAAMC,aAAa,GAAGjB,iBAAiB,CAACM,UAAD,EAAaJ,OAAO,CAACW,SAArB,CAAvC;AACA,OAAO,UAAUK,SAAV,GAAsB;EACzB,MAAMf,UAAU,CAACG,UAAD,EAAaW,aAAb,CAAhB;AACH;AAED,MAAME,YAAY,GAAG;EACjBL,KAAK,EAAE,EADU;EAEjBC,IAAI,EAAE,EAFW;EAGjBC,IAAI,EAAE,EAHW;EAIjBI,IAAI,EAAE,IAJW;EAKjBC,SAAS,EAAE;AALM,CAArB;AAQA,MAAMC,KAAK,GAAGvB,aAAa,CACvB;EACI,CAACK,UAAD,GAAcmB,KAAK,IAAIJ,YAD3B;EAEI,CAACd,YAAD,GAAgB,CAACkB,KAAD;IAAA,IAAQ;MAACC,OAAO,EAAE;QAACb,GAAD;QAAMC;MAAN;IAAV,CAAR;IAAA,OAAqC,EACjD,GAAGW,KAD8C;MAEjD,CAACZ,GAAD,GAAOC;IAF0C,CAArC;EAAA,CAFpB;EAMI,CAACN,UAAD,GAAciB,KAAK,KAAK,EACpB,GAAGA,KADiB;IAEpBH,IAAI,EAAE,IAFc;IAGpBC,SAAS,EAAE;EAHS,CAAL,CANvB;EAWI,CAACd,kBAAD,GAAsB,CAACgB,KAAD;IAAA,IAAQ;MAACC,OAAO,EAAEJ;IAAV,CAAR;IAAA,OAA6B,EAC/C,GAAGG,KAD4C;MAE/CH;IAF+C,CAA7B;EAAA,CAX1B;EAeI,CAACZ,kBAAD,GAAsB,CAACe,KAAD;IAAA,IAAQ;MAACC,OAAO,EAAEH;IAAV,CAAR;IAAA,OAAkC,EACpD,GAAGE,KADiD;MAEpDF;IAFoD,CAAlC;EAAA;AAf1B,CADuB,EAqBvBF,YArBuB,CAA3B;AAwBA,eAAeG,KAAf"},"metadata":{},"sourceType":"module"}