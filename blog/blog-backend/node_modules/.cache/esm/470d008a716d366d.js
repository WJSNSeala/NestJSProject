let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_716‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_716‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_716‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_716‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_716‍.w("./api",[["default",["api"],function(v){api=v}]]);_716‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();









const {PORT, MONGO_URI} = process.env;

mongoose
.connect(MONGO_URI, {useNewUrlParser: true})
.then(() =>{
    console.log('connected to mongoDB');
    // createFakeData();
})
.catch(e => {
    _716‍.g.console.error(e);
});


const app = new Koa();
const router = new Router();
app.cors({
    origin: 'http://121.137.72.141:8001',
    credentials: true,
})
router.use('/api', api.routes()); // api 라우터 적용

app.use(bodyParser()); // router 적용 전에 사용


// app.use(async (ctx, next) => {

//     ctx.set('Access-Control-Allow-Origin', 'http://121.137.72.141:8001');
    
//     ctx.set('Access-Control-Allow-Headers', '*');
//     ctx.set('Access-Control-Allow-Credentials', true);
//     // ctx.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
    
//     ctx.set('Access-Control-Allow-Methods', 'POST');
    
//     await next();
    
// });
    
app.use(jwtMiddleware);


    
app.use(
    router.routes()
).use(router.allowedMethods());

const port = PORT || 8000;

app.listen(port, () => {
    console.log(`listening to port ${port}`);
});

