let Post,mongoose,Joi;_fa3‍.x([["getPostById",()=>getPostById],["checkOwnPost",()=>checkOwnPost],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_fa3‍.w("../../models/posts",[["default",["Post"],function(v){Post=v}]]);_fa3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_fa3‍.w("@hapi/joi",[["default",["Joi"],function(v){Joi=v}]]);



const {ObjectId} = mongoose.Types;

       const getPostById = async (ctx, next) => {
    const {id} = ctx.params;

    if (!ObjectId.isValid(id)) {
        ctx.status = 400;
        return;
    }
    try {
        const post = await Post.findById(id);
        if(!post) {
            ctx.status=404;
            return;
        }
        ctx.state.post=post;
        return next();
    } catch(e){
        ctx.throw(500, e);
    }
}

       const checkOwnPost = (ctx, next) => {
    const {user, post} = ctx.state;
    if (post.user._id.toString() !== user._id) {
        ctx.status = 403;
        return;
    }
    return next();
}

/*
POST /api/posts
{
    title: 'title',
    body: 'content',
    tags: ['tag1', 'tag2']
}
*/ 
       const write = async ctx => {
    const schema = Joi.object().keys({
        title: Joi.string().required(),
        body: Joi.string().required(),
        tags: Joi.array()
        .items(Joi.string()).required()
    });

    const result = schema.validate(ctx.request.body);
    if (result.error) {
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    const {title, body, tags} = ctx.request.body;
    _fa3‍.g.console.log(title, body, tags);

    const post = new Post({
        title, body, tags,
        user: ctx.state.user,
    });

    try {
        await post.save();
        ctx.body = post;
    } catch (e) {
        ctx.throw(500, e);
    }
};

/*
GET /api/posts

*/
       const list = async ctx => {
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    const {tag, username} = ctx.query;
    const query = {
        ...(username ? {'user.username':username} : {}),
        ...(tag ? {tags: tag} : {}),
    }

    try {
        const posts = await Post
        .find(query)
        .sort({_id: -1})
        .limit(10)
        .skip((page -1) * 10)
        .exec();
        const postCount = await Post.countDocuments(query).exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));
        ctx.body = posts
        .map(post => post.toJSON())
        .map(post => ({
            ...post,
            body:
            post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`
        }));
        
    } catch (e) {
        ctx.throw(500, e);
    }
};

/*
GET /api/posts/:id
*/
       const read = async ctx => {
    ctx.body = ctx.state.post;
};

       const remove = async ctx => {
    const {id} = ctx.params;
    try {
        await Post.findByIdAndRemove(id).exec();
        ctx.status = 204; // 성공했지만 응답할 데이터는 없음
    } catch (e) {
        ctx.throw(500, e);
    }
};

       const update= async ctx => {
    const {id} = ctx.params;

    const schema = Joi.object().keys({
        title: Joi.string(),
        body: Joi.string(),
        tags: Joi.array().items(Joi.string()),
    });

    const result = schema.validate(ctx.request.body);
    if (result.error) {
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }
    try {
        const post = await Post.findByIdAndUpdate(
            id, ctx.request.body, {
                new: true
            }
        ).exec();

        if (!post) {
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    } catch (e) {
        ctx.throw(500, e);
    }
};









