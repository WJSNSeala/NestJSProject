let jwt,User;_4d8‍.x([["default",()=>_4d8‍.o]]);_4d8‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_4d8‍.w("../models/user",[["default",["User"],function(v){User=v}]]);


const jwtMiddleware = async (ctx, next) => {
    const token = ctx.cookies.get('access_token');
    if (!token) {
        _4d8‍.g.console.log("jwtMiddleware.js : no token in request", ctx.cookies);
        return next(); // no token, just pass to next middle ware
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        ctx.state.user = {
            _id: decoded._id,
            username: decoded.username,
        }
        
        _4d8‍.g.console.log("jwtMiddleware.js : get token success : ", decoded);

        const now = Math.floor(Date.now() / 1000);
        if (decoded.exp - now < 60 * 60 * 24 * 3.5) {
            const user = await User.findById(decoded._id);
            const token = user.generateToken();
            ctx.cookies.set('access_token', token, {
                maxAge: 1000 * 60 * 60 * 24 * 7,// 7일
                httpOnly: true,
            });
        }
        return next();

    } catch(e) {
        return next();
        // verification fail
    }
};

_4d8‍.d(jwtMiddleware);
